// For format details, see https://aka.ms/devcontainer.json. For config options, see the
// README at: https://github.com/devcontainers/templates/tree/main/src/dotnet-postgres
{
	"name": "TC .NET API Dev Container",
	// this combines base compose with all service with the one that contains .NET SDK and Karate
	"dockerComposeFile": [
		"../docker-compose.yml",
		"docker-compose.yml"
	],
	// our terminal will need .NET SDK and Karate that are part of this docker compose service
	"service": "dotnet-sdk-with-karate",
	// https://github.com/microsoft/vscode-remote-release/issues/5795#issuecomment-2518255296
	// it is not possible to pass a profile name MockForDevelopment thus we need to hadrcode here services that need to be run as part of Dev Container
	"runServices": [
		"inner-circle-items-api-db",
		"inner-circle-items-api-mock-server"
	],
    "workspaceFolder": "/workspaces/${localWorkspaceFolderBasename}",
	"features": {
		// this is needed to be able to call Host OS Docker (DooD)
		"ghcr.io/devcontainers/features/docker-outside-of-docker:1": {
		}
	},
	"customizations": {
		"vscode": {
			"extensions": [
				"karatelabs.karate",
				"bierner.markdown-mermaid",
                // C# Dev Kit recommended extension
                "ms-dotnettools.csdevkit"
			]
		}
	},
	"containerEnv": {
		"AUTH_FIRST_TENANT_LOGIN_WITH_ALL_PERMISSIONS": "first-tenant-login-with-all-permissions",
		"AUTH_FIRST_TENANT_PASSWORD_WITH_ALL_PERMISSIONS": "first-tenant-password-with-all-permissions",
		"AUTH_SECOND_TENANT_LOGIN_WITH_ALL_PERMISSIONS": "second-tenant-login-with-all-permissions",
		"AUTH_SECOND_TENANT_PASSWORD_WITH_ALL_PERMISSIONS": "second-tenant-password-with-all-permissions",
		"AUTH_LOGIN_WITHOUT_PERMISSIONS": "first-tenant-login-without-permissions",
		"AUTH_PASSWORD_WITHOUT_PERMISSIONS": "first-tenant-password-without-permissions",
		"AUTH_API_ROOT_URL": "http://localhost:8501",
		"API_ROOT_URL": "http://localhost:4501",
		"SHOULD_USE_FAKE_EXTERNAL_DEPENDENCIES": "true"
	},
	// this root is needed e.g. in case when you edit files not inly in VSCode in Dev Container but also directly
	// it might not have enough rights to write to files that are open in another editor with Admin rights
	"remoteUser": "root",
	"remoteEnv": {
		"LOCAL_WORKSPACE_FOLDER": "${localWorkspaceFolder}",
		// let's set our default envrironment here to not do it manually every time
		"ASPNETCORE_ENVIRONMENT": "MockForDevelopment",
		// https://learn.microsoft.com/en-us/aspnet/core/fundamentals/configuration/?view=aspnetcore-9.0#default-host-configuration-sources
		// https://andrewlock.net/8-ways-to-set-the-urls-for-an-aspnetcore-app/
		// this will override urls in appsettings.MockForDevelopment.json and use different port when run within Dev Container to avoid using the same port
		"URLS": "http://*:4501"
	},
	// need to open the API, DB, and MockServer ports to be able to open them using Host OS localhost
	"forwardPorts": [
		4501,
		7501,
		8501
	],
	"portsAttributes": {
		"4501": {
			"label": "VSCode Dev Container API Running Port",
			"requireLocalPort": true
		},
		"7501": {
			"label": "VSCode Dev Container DB Running Port",
			"requireLocalPort": true
		},
		"8501": {
			"label": "VSCode Dev Container MockServer Running Port",
			"requireLocalPort": true
		}
	}
}